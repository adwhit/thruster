pub(crate) const GEN_HEADER: &str = "
// *** This file was generated by thruster ***

use stub::*;
use std::io;
use rocket;
";

pub(crate) const STUB_HEADER: &str = "
// *** This file was generated by thruster ***

use std::io;
";

pub(crate) const LAUNCH_TEMPLATE: &str = r#"
pub fn mount_api(rocket: rocket::Rocket) -> rocket::Rocket {
    rocket.mount("/", routes![
        {{#each routes as |r|~}}
        _{{r}},
        {{/each~}}
    ])
}"#;

pub(crate) const ROUTE_TEMPLATE: &str = r#"
#[{{method}}("{{route}}")]
fn _{{function}}(
    {{#each args as |arg|~}}
    {{arg.name}}: {{arg.type}},
    {{/each~}}
) -> io::Result<{{result_type}}> {
    {{function}}()
}"#;

pub(crate) const STUB_TEMPLATE: &str = r#"
pub fn {{function}}() -> io::Result<{{result_type}}> {
    unimplemented!()
}"#;

pub(crate) const MAIN_TEMPLATE: &str = r#"
// *** This file was generated by thruster ***

#![feature(plugin)]
#![plugin(rocket_codegen)]

extern crate rocket;

mod gen;
mod stub;

fn main() {
    let rocket = rocket::Rocket::ignite();
    let rocket = gen::mount_api(rocket);
    println!("{}", rocket.launch());
}"#;
