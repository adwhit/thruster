pub(crate) const GEN_HEADER: &str = "
// *** This file was generated by thruster ***

use {{stub}}::*;
use std::io;
use rocket;
";

pub(crate) const STUB_HEADER: &str = "
// *** This file was generated by thruster ***

use std::io;
";

pub(crate) const LAUNCH_TEMPLATE: &str = r#"
fn launch() -> Result<rocket::Rocket> {
    rocket::ignite().mount("/", routes![
        {{#each routes as |r|~}}
        _{{r}},
        {{/each~}}
    ])
}"#;

pub(crate) const ROUTE_TEMPLATE: &str = r#"
#[{{method}}("{{route}}")]
fn _{{function}}(
    {{#each args as |arg|~}}
    {{arg.name}}: {{arg.type}},
    {{/each~}}
) -> io::Result<{{result_type}}> {
    {{function}}()
}"#;

pub(crate) const STUB_TEMPLATE: &str = r#"
pub fn {{function}}() -> io::Result<{{result_type}}> {
    unimplemented!()
}"#;

pub(crate) const MAIN_TEMPLATE: &str = r#"
// *** This file was generated by thruster ***

extern crate rocket;

mod {{gen}};
mod {{stubs}};

fn main() {
    let rocket = Rocket::ignite();
    let rocket = {{gen}}::mount_api(rocket);
    rocket.launch().unwrap();
}"#;
