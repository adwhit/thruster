// TODO use template inheritance rather than rendering each part separately

pub(crate) const GEN_TEMPLATE: &str = r#"
// *** This file was generated by thruster ***

use stub::*;
use types::*;
use std::io;
use rocket;
use rocket_contrib::Json;

{{#each entrypoints as |e|~}}
#[{{e.method}}("{{e.route}}")]
fn _{{e.function}}(
    {{#each e.args as |arg|~}}
    {{arg.name}}: {{arg.type}},
    {{/each~}}
) -> Result<Json<{{e.result_type}}>, ()> {
    {{e.function}}().map(Json)
}

{{/each}}

pub fn mount_api(rocket: rocket::Rocket) -> rocket::Rocket {
    rocket.mount("/", routes![
        {{#each entrypoints as |e|~}}
        _{{e.function}},
        {{/each~}}
    ])
}"#;

pub(crate) const STUB_HEADER: &str = "
// *** This file was generated by thruster ***

use std::io;
use types::*;
";

pub(crate) const FUNCTION_TEMPLATE: &str = r#"
{{documentation~}}
pub fn {{function}}() -> Result<{{result_type}}, ()> {
    unimplemented!()
}"#;

pub(crate) const TYPES_HEADER: &str = r#"
// *** This file was generated by thruster ***
"#;

pub(crate) const MAIN_TEMPLATE: &str = r#"
// *** This file was generated by thruster ***

#![feature(plugin, custom_derive)]
#![plugin(rocket_codegen)]

extern crate rocket;
extern crate rocket_contrib;
#[macro_use]
extern crate serde_derive;
extern crate serde;

mod gen;
mod stub;
mod types;

fn main() {
    let rocket = rocket::Rocket::ignite();
    let rocket = gen::mount_api(rocket);
    println!("{}", rocket.launch());
}"#;
